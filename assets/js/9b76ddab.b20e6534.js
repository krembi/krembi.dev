"use strict";(self.webpackChunkdocument_test=self.webpackChunkdocument_test||[]).push([[1868],{44581:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=s(74848),t=s(28453);const r={sidebar_position:4,tags:["themes","liquidjs"],title:"Best Practices"},l="Template Designers",a={id:"themes/engines/liquid/best-practice",title:"Best Practices",description:"This document describes the syntax and semantics of the template engine",source:"@site/docs/themes/engines/liquid/best-practice.md",sourceDirName:"themes/engines/liquid",slug:"/themes/engines/liquid/best-practice",permalink:"/docs/themes/engines/liquid/best-practice",draft:!1,unlisted:!1,tags:[{inline:!0,label:"themes",permalink:"/docs/tags/themes"},{inline:!0,label:"liquidjs",permalink:"/docs/tags/liquidjs"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,tags:["themes","liquidjs"],title:"Best Practices"},sidebar:"themesSidebar",previous:{title:"Filters",permalink:"/docs/themes/engines/liquid/filters"}},o={},d=[{value:"Synopsis",id:"synopsis",level:2},{value:"Variables",id:"variables",level:2},{value:"Sidebar Implementation",id:"sidebar-implementation",level:3},{value:"Global Variables",id:"global-variables",level:3},{value:"Setting Variables",id:"setting-variables",level:3},{value:"Filters",id:"filters",level:2},{value:"Functions",id:"functions",level:2},{value:"Named Arguments",id:"named-arguments",level:2},{value:"Control Structure",id:"control-structure",level:2},{value:"Comments",id:"comments",level:2},{value:"Including other Templates",id:"including-other-templates",level:2},{value:"Template Inheritance",id:"template-inheritance",level:2},{value:"HTML Escaping",id:"html-escaping",level:2},{value:"Working with Manual Escaping",id:"working-with-manual-escaping",level:3},{value:"Working with Automatic Escaping",id:"working-with-automatic-escaping",level:3},{value:"Escaping",id:"escaping",level:2},{value:"Macros",id:"macros",level:2},{value:"Expressions",id:"twig-expressions",level:2},{value:"Literals",id:"literals",level:3},{value:"String Interpolation",id:"templates-string-interpolation",level:3},{value:"Math",id:"math",level:3},{value:"Logic",id:"template_logic",level:3},{value:"Comparisons",id:"comparisons",level:3},{value:"Containment Operator",id:"containment-operator",level:3},{value:"Test Operator",id:"test-operator",level:3},{value:"Other Operators",id:"other-operators",level:3},{value:"Operators",id:"operators",level:3},{value:"Whitespace Control",id:"templates-whitespace-control",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"template-designers",children:"Template Designers"}),"\n",(0,i.jsx)(n.p,{children:"This document describes the syntax and semantics of the template engine\nand will be most useful as reference to those creating Twig templates."}),"\n",(0,i.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsxs)(n.p,{children:["A template is a regular text file. It can generate any text-based format\n(HTML, LaTeX, js etc.). It doesn't have a specific extension,\n",(0,i.jsx)(n.code,{children:".liquid"})," or ",(0,i.jsx)(n.code,{children:".html"})," are just fine. But we prefer to stick on ",(0,i.jsx)(n.code,{children:".liquid"})," as written in the all documentation pages."]}),"\n",(0,i.jsxs)(n.p,{children:["A template contains ",(0,i.jsx)(n.strong,{children:"variables"})," or ",(0,i.jsx)(n.strong,{children:"expressions"}),", which get replaced\nwith values when the template is evaluated, and ",(0,i.jsx)(n.strong,{children:"tags"}),", which control\nthe template's logic."]}),"\n",(0,i.jsx)(n.p,{children:"Below is a minimal template that illustrates a few basics. We will cover\nfurther details later on:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",metastring:'title="layout.liquid"',children:'<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Webpage</title>\n    </head>\n    <body>\n        <ul id="navigation">\n        {% for item in navigation %}\n            <li><a href="{{ item.href }}">{{ item.caption }}</a></li>\n        {% endfor %}\n        </ul>\n\n        <h1>My Webpage</h1>\n        {{ a_variable }}\n    </body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["There are two kinds of delimiters: ",(0,i.jsx)(n.code,{children:"{% ... %}"})," and ",(0,i.jsx)(n.code,{children:"{{ ... }}"}),". The\nfirst one is used to execute statements such as for-loops, the latter\noutputs the result of an expression."]}),"\n",(0,i.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.p,{children:"The application passes variables to the templates for manipulation in\nthe template. Variables may have attributes or elements you can access,\ntoo. The visual representation of a variable depends heavily on the\napplication providing it."}),"\n",(0,i.jsxs)(n.p,{children:["Use a dot (",(0,i.jsx)(n.code,{children:"."}),") to access attributes of a variable (methods or\nproperties of a object, or items of a array):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ foo.bar }}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["It's important to know that the curly braces are ",(0,i.jsx)(n.em,{children:"not"})," part of the\nvariable but the print statement. When accessing variables inside tags,\ndon't put the braces around them."]})}),"\n",(0,i.jsx)(n.h3,{id:"sidebar-implementation",children:"Sidebar Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["For convenience's sake ",(0,i.jsx)(n.code,{children:"foo.bar"})," does the following things\nlayer:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["check if ",(0,i.jsx)(n.code,{children:"foo"})," is a sequence or a mapping and ",(0,i.jsx)(n.code,{children:"bar"})," a valid element;"]}),"\n",(0,i.jsxs)(n.li,{children:["if not, and if ",(0,i.jsx)(n.code,{children:"foo"})," is an object, check that ",(0,i.jsx)(n.code,{children:"bar"})," is a valid\nproperty;"]}),"\n",(0,i.jsxs)(n.li,{children:["if not, and if ",(0,i.jsx)(n.code,{children:"foo"})," is an object, check that ",(0,i.jsx)(n.code,{children:"bar"})," is a valid\nmethod (even if ",(0,i.jsx)(n.code,{children:"bar"})," is the constructor - use ",(0,i.jsx)(n.code,{children:"__construct()"}),"\ninstead);"]}),"\n",(0,i.jsxs)(n.li,{children:["if not, and if ",(0,i.jsx)(n.code,{children:"foo"})," is an object, check that ",(0,i.jsx)(n.code,{children:"getBar"})," is a valid\nmethod;"]}),"\n",(0,i.jsxs)(n.li,{children:["if not, and if ",(0,i.jsx)(n.code,{children:"foo"})," is an object, check that ",(0,i.jsx)(n.code,{children:"isBar"})," is a valid\nmethod;"]}),"\n",(0,i.jsxs)(n.li,{children:["if not, and if ",(0,i.jsx)(n.code,{children:"foo"})," is an object, check that ",(0,i.jsx)(n.code,{children:"hasBar"})," is a valid\nmethod;"]}),"\n",(0,i.jsxs)(n.li,{children:["if not, and if ",(0,i.jsx)(n.code,{children:"strict_variables"})," is ",(0,i.jsx)(n.code,{children:"false"}),", return ",(0,i.jsx)(n.code,{children:"null"}),";"]}),"\n",(0,i.jsx)(n.li,{children:"if not, throw an exception."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We also support a specific syntax for accessing items on arrays,\n",(0,i.jsx)(n.code,{children:"foo['bar']"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["check if ",(0,i.jsx)(n.code,{children:"foo"})," is a sequence or a mapping and ",(0,i.jsx)(n.code,{children:"bar"})," a valid element;"]}),"\n",(0,i.jsxs)(n.li,{children:["if not, and if ",(0,i.jsx)(n.code,{children:"strict_variables"})," is ",(0,i.jsx)(n.code,{children:"false"}),", return ",(0,i.jsx)(n.code,{children:"null"}),";"]}),"\n",(0,i.jsx)(n.li,{children:"if not, throw an exception."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"attribute"})," function is also useful when the attribute contains\nspecial characters (like ",(0,i.jsx)(n.code,{children:"-"})," that would be interpreted as the minus\noperator):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{# equivalent to the non-working foo.data-foo #}\n{{ attribute(foo, 'data-foo') }}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"global-variables",children:"Global Variables"}),"\n",(0,i.jsx)(n.p,{children:"The following variables are always available in templates:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_self"}),": references the current template name;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_context"}),": references the current context;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_charset"}),": references the current charset."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"setting-variables",children:"Setting Variables"}),"\n",(0,i.jsxs)(n.p,{children:["You can assign values to variables inside code blocks. Assignments use\nthe ",(0,i.jsx)(n.a,{href:"/docs/themes/engines/liquid/tags#assign",children:"#assign"})," tag:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% assign foo = 'foo' %}\n{% assign foo = [1, 2] %}\n{% assign foo = {'foo': 'bar'} %}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"filters",children:"Filters"}),"\n",(0,i.jsxs)(n.p,{children:["Variables can be modified by ",(0,i.jsx)(n.strong,{children:"filters"}),". Filters are separated from the\nvariable by a pipe symbol (",(0,i.jsx)(n.code,{children:"|"}),"). Multiple filters can be chained. The\noutput of one filter is applied to the next."]}),"\n",(0,i.jsxs)(n.p,{children:["The following example removes all HTML tags from the ",(0,i.jsx)(n.code,{children:"name"})," and\ntitle-cases it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ name|striptags|title }}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Filters that accept arguments have parentheses around the arguments.\nThis example joins the elements of a list by commas:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ list | join(', ') }}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To apply a filter on a section of code, wrap it with the ",(0,i.jsx)(n.a,{href:"/docs/themes/engines/liquid/tags#apply",children:"#apply"})," tag:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% apply upper %}\n    This text becomes uppercase\n{% endapply %}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Go to the ",(0,i.jsx)(n.code,{children:"filters<filters/index>"})," page to\nlearn more about built-in filters."]}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsxs)(n.p,{children:["Functions can be called to generate content. Functions are called by\ntheir name followed by parentheses (",(0,i.jsx)(n.code,{children:"()"}),") and may have arguments."]}),"\n",(0,i.jsxs)(n.p,{children:["For instance, the ",(0,i.jsx)(n.code,{children:"range"})," function returns a list containing an\narithmetic progression of integers:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% for i in range(0, 3) %}\n    {{ i }},\n{% endfor %}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Go to the ",(0,i.jsx)(n.code,{children:"functions<functions/index>"})," rolepage to learn more about the built-in functions."]}),"\n",(0,i.jsx)(n.h2,{id:"named-arguments",children:"Named Arguments"}),"\n",(0,i.jsx)(n.p,{children:"Named arguments are supported in functions, filters and tests."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% for i in range(low=1, high=10, step=2) %}\n    {{ i }},\n{% endfor %}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Using named arguments makes your templates more explicit about the\nmeaning of the values you pass as arguments:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ data | convert_encoding('UTF-8', 'iso-2022-jp') }}\n\n{# versus #}\n\n{{ data | convert_encoding(from='iso-2022-jp', to='UTF-8') }}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Named arguments also allow you to skip some arguments for which you\ndon't want to change the default value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'{# the first argument is the date format, which defaults to the global date format if null is passed #}\n{{ "now" | date(null, "Europe/Paris") }}\n\n{# or skip the format value by using a named argument for the time zone #}\n{{ "now" | date(timezone="Europe/Paris") }}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also use both positional and named arguments in one call, in\nwhich case positional arguments must always come before named arguments:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'{{ "now" | date(\'d/m/Y H:i\', timezone="Europe/Paris") }}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Each function and filter documentation page has a section where the\nnames of all arguments are listed when supported."})}),"\n",(0,i.jsx)(n.h2,{id:"control-structure",children:"Control Structure"}),"\n",(0,i.jsxs)(n.p,{children:["A control structure refers to all those things that control the flow of\na program - conditionals (i.e. ",(0,i.jsx)(n.code,{children:"if"}),"/",(0,i.jsx)(n.code,{children:"elseif"}),"/",(0,i.jsx)(n.code,{children:"else"}),"), ",(0,i.jsx)(n.code,{children:"for"}),"-loops, as\nwell as things like blocks. Control structures appear inside ",(0,i.jsx)(n.code,{children:"{% ... %}"}),"\nblocks."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, to display a list of users provided in a variable called\n",(0,i.jsx)(n.code,{children:"users"}),", use the ",(0,i.jsx)(n.code,{children:"for<tags/for>"})," role:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"<h1>Members</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username | e }}</li>\n    {% endfor %}\n</ul>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"if<tags/if>"})," role can be used to test\nan expression:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% if users|length > 0 %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username | e }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Go to the ",(0,i.jsx)(n.a,{href:"/docs/themes/engines/liquid/tags",children:"#tags"})," role to learn\nmore about the built-in tags."]}),"\n",(0,i.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,i.jsxs)(n.p,{children:["To comment-out part of a line in a template, use the comment syntax\n",(0,i.jsx)(n.code,{children:"{# ... #}"}),". This is useful for debugging or to add information for\nother template designers or yourself:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{# note: disabled template because we no longer use this\n    {% for user in users %}\n        ...\n    {% endfor %}\n#}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"including-other-templates",children:"Including other Templates"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/themes/engines/liquid/tags#render",children:"#render"})," role\nis useful to include a template and return the rendered content of that\ntemplate into the current one:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'    {% render "partials/some.liquid" %}\n'})}),"\n",(0,i.jsx)(n.p,{children:"By default, included templates have access to the same context as the\ntemplate which includes them. This means that any variable defined in\nthe main template will be available in the included template too:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'{% for box in boxes %}\n    {% render "partials/some.liquid" %}\n{% endfor %}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The included template ",(0,i.jsx)(n.code,{children:"render_box.liquid"})," is able to access the ",(0,i.jsx)(n.code,{children:"box"}),"\nvariable."]}),"\n",(0,i.jsx)(n.p,{children:"The name of the template depends on the template loader. You can access templates in subdirectories with\na slash:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'{% render "partials/some.liquid" %}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This behavior depends on the application embedding."}),"\n",(0,i.jsx)(n.h2,{id:"template-inheritance",children:"Template Inheritance"}),"\n",(0,i.jsxs)(n.p,{children:['The most powerful part is template inheritance. Template\ninheritance allows you to build a base "skeleton" template that\ncontains all the common elements of your site and defines ',(0,i.jsx)(n.strong,{children:"blocks"}),"\nthat child templates can override."]}),"\n",(0,i.jsx)(n.p,{children:"It's easier to understand the concept by starting with an example."}),"\n",(0,i.jsxs)(n.p,{children:["Let's define a base template, ",(0,i.jsx)(n.code,{children:"base.liquid"}),", which defines an HTML\nskeleton document that might be used for a two-column page:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <link rel="stylesheet" href="style.css"/>\n            <title>{% block title %}{% endblock %} - My Webpage</title>\n        {% endblock %}\n    </head>\n    <body>\n        <div id="content">{% block content %}{% endblock %}</div>\n        <div id="footer">\n            {% block footer %}\n                &copy; Copyright 2011 by <a href="https://example.com/">you</a>.\n            {% endblock %}\n        </div>\n    </body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the ",(0,i.jsx)(n.code,{children:"block<tags/block>"})," roletags define four blocks that child templates can fill in. All the\n",(0,i.jsx)(n.code,{children:"block"})," tag does is to tell the template engine that a child template\nmay override those portions of the template."]}),"\n",(0,i.jsx)(n.p,{children:"A child template might look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'{% layout "base.liquid" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    <style type="text/css">\n        .important { color: #336699; }\n    </style>\n{% endblock %}\n{% block content %}\n    <h1>Index</h1>\n    <p class="important">\n        Welcome to my awesome homepage.\n    </p>\n{% endblock %}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/themes/engines/liquid/tags#layout",children:"layout"}),' role is the key\nhere. It tells the template engine that this template "extends"\nanother template. When the template system evaluates this template,\nfirst it locates the parent. The extends tag should be the first tag in\nthe template.']}),"\n",(0,i.jsxs)(n.p,{children:["Note that since the child template doesn't define the ",(0,i.jsx)(n.code,{children:"footer"})," block,\nthe value from the parent template is used instead."]}),"\n",(0,i.jsxs)(n.p,{children:["It's possible to render the contents of the parent block by using the\n",(0,i.jsx)(n.code,{children:"parent<functions/parent>"})," role. This\ngives back the results of the parent block:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The documentation page for the ",(0,i.jsx)(n.code,{children:"extends<tags/extends>"}),"\ntag describes more advanced features like block nesting,\nscope, dynamic inheritance, and conditional inheritance."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:['We also supports multiple inheritance via "horizontal reuse" with\nthe help of the ',(0,i.jsx)(n.code,{children:"use<tags/use>"})," role."]})}),"\n",(0,i.jsx)(n.h2,{id:"html-escaping",children:"HTML Escaping"}),"\n",(0,i.jsx)(n.p,{children:"When generating HTML from templates, there's always a risk that a\nvariable will include characters that affect the resulting HTML. There\nare two approaches: manually escaping each variable or automatically\nescaping everything by default."}),"\n",(0,i.jsx)(n.p,{children:"We support both, automatic escaping is enabled by default."}),"\n",(0,i.jsx)(n.h3,{id:"working-with-manual-escaping",children:"Working with Manual Escaping"}),"\n",(0,i.jsxs)(n.p,{children:["If manual escaping is enabled, it is ",(0,i.jsx)(n.strong,{children:"your"})," responsibility to escape\nvariables if needed. What to escape? Any variable that comes from an\nuntrusted source."]}),"\n",(0,i.jsxs)(n.p,{children:["Escaping works by using the ",(0,i.jsx)(n.code,{children:"escape<filters/escape>"}),"\nor ",(0,i.jsx)(n.code,{children:"e"})," filter:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ user.username | e }}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By default, the ",(0,i.jsx)(n.code,{children:"escape"})," filter uses the ",(0,i.jsx)(n.code,{children:"html"})," strategy, but depending\non the escaping context, you might want to explicitly use another\nstrategy:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ user.username | e('js') }}\n{{ user.username | e('css') }}\n{{ user.username | e('url') }}\n{{ user.username | e('html_attr') }}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"working-with-automatic-escaping",children:"Working with Automatic Escaping"}),"\n",(0,i.jsxs)(n.p,{children:["Whether automatic escaping is enabled or not, you can mark a section of\na template to be escaped or not by using the\n",(0,i.jsx)(n.code,{children:"autoescape<tags/autoescape>"})," role:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% autoescape %}\n    Everything will be automatically escaped in this block (using the HTML strategy)\n{% endautoescape %}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By default, auto-escaping uses the ",(0,i.jsx)(n.code,{children:"html"})," escaping strategy. If you\noutput variables in other contexts, you need to explicitly escape them\nwith the appropriate escaping strategy:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% autoescape 'js' %}\n    Everything will be automatically escaped in this block (using the JS strategy)\n{% endautoescape %}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"escaping",children:"Escaping"}),"\n",(0,i.jsxs)(n.p,{children:["It is sometimes desirable or even necessary to have Twig ignore parts it\nwould otherwise handle as variables or blocks. For example if the\ndefault syntax is used and you want to use ",(0,i.jsx)(n.code,{children:"{{"})," as raw string in the\ntemplate and not start a variable you have to use a trick."]}),"\n",(0,i.jsxs)(n.p,{children:["The easiest way is to output the variable delimiter (",(0,i.jsx)(n.code,{children:"{{"}),") by using a\nvariable expression:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ '{{' }}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For bigger sections it makes sense to mark a block\n",(0,i.jsx)(n.code,{children:"verbatim<tags/verbatim>"})," role"]}),"\n",(0,i.jsx)(n.h2,{id:"macros",children:"Macros"}),"\n",(0,i.jsxs)(n.p,{children:["Macros are comparable with functions in regular programming languages.\nThey are useful to reuse HTML fragments to not repeat yourself. They are\ndescribed in the ",(0,i.jsx)(n.code,{children:"macro<tags/macro>"})," role\ndocumentation."]}),"\n",(0,i.jsx)(n.h2,{id:"twig-expressions",children:"Expressions"}),"\n",(0,i.jsx)(n.p,{children:"We allow expressions everywhere."}),"\n",(0,i.jsx)(n.h3,{id:"literals",children:"Literals"}),"\n",(0,i.jsx)(n.p,{children:"The simplest form of expressions are literals. Literals are\nrepresentations for types such as strings, numbers, and arrays. The\nfollowing literals exist:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'"Hello World"'}),": Everything between two double or single quotes is a\nstring. They are useful whenever you need a string in the template\n(for example as arguments to function calls, filters or just to\nextend or include a template). A string can contain a delimiter if\nit is preceded by a backslash (",(0,i.jsx)(n.code,{children:"\\"}),") -- like in ",(0,i.jsx)(n.code,{children:"'It\\'s good'"}),". If\nthe string contains a backslash (e.g. ",(0,i.jsx)(n.code,{children:"'c:\\Program Files'"}),") escape\nit by doubling it (e.g. ",(0,i.jsx)(n.code,{children:"'c:\\\\Program Files'"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"42"})," / ",(0,i.jsx)(n.code,{children:"42.23"}),": Integers and floating point numbers are created by\nwriting the number down. If a dot is present the number is a float,\notherwise an integer."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'["foo", "bar"]'}),": Sequences are defined by a sequence of expressions\nseparated by a comma (",(0,i.jsx)(n.code,{children:","}),") and wrapped with squared brackets (",(0,i.jsx)(n.code,{children:"[]"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'{"foo": "bar"}'}),": Mappings are defined by a list of keys and values\nseparated by a comma (",(0,i.jsx)(n.code,{children:","}),") and wrapped with curly braces (",(0,i.jsx)(n.code,{children:"{}"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{# keys as string #}\n{'foo': 'foo', 'bar': 'bar'}\n\n{# keys as names (equivalent to the previous mapping) #}\n{foo: 'foo', bar: 'bar'}\n\n{# keys as integer #}\n{2: 'foo', 4: 'bar'}\n\n{# keys can be omitted if it is the same as the variable name #}\n{foo}\n{# is equivalent to the following #}\n{'foo': foo}\n\n{# keys as expressions (the expression must be enclosed into parentheses) #}\n{% assign foo = 'foo' %}\n{(foo): 'foo', (1 + 1): 'bar', (foo ~ 'b'): 'baz'}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"true"})," / ",(0,i.jsx)(n.code,{children:"false"}),": ",(0,i.jsx)(n.code,{children:"true"})," represents the true value, ",(0,i.jsx)(n.code,{children:"false"}),"\nrepresents the false value."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"null"}),": ",(0,i.jsx)(n.code,{children:"null"})," represents no specific value. This is the value\nreturned when a variable does not exist. ",(0,i.jsx)(n.code,{children:"none"})," is an alias for\n",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Sequences and mappings can be nested:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'{% assign foo = [1, {"foo": "bar"}] %}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Using double-quoted or single-quoted strings has no impact on\nperformance but\n",(0,i.jsx)(n.code,{children:"string interpolation <templates-string-interpolation>"}),"\nis only supported in double-quoted strings."]})}),"\n",(0,i.jsx)(n.h3,{id:"templates-string-interpolation",children:"String Interpolation"}),"\n",(0,i.jsxs)(n.p,{children:["String interpolation (",(0,i.jsx)(n.code,{children:"#{expression}"}),") allows any valid expression to\nappear within a ",(0,i.jsx)(n.em,{children:"double-quoted string"}),". The result of evaluating that\nexpression is inserted into the string:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:'{{ "foo #{bar} baz" }}\n{{ "foo #{1 + 2} baz" }}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"math",children:"Math"}),"\n",(0,i.jsx)(n.p,{children:"We allow you to do math in templates; the following operators are\nsupported:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"+"}),": Adds two numbers together (the operands are casted to numbers).\n",(0,i.jsx)(n.code,{children:"{{ 1 + 1 }}"})," is ",(0,i.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-"}),": Subtracts the second number from the first one. ",(0,i.jsx)(n.code,{children:"{{ 3 - 2 }}"}),"\nis ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/"}),": Divides two numbers. The returned value will be a floating\npoint number. ",(0,i.jsx)(n.code,{children:"{{ 1 / 2 }}"})," is ",(0,i.jsx)(n.code,{children:"{{ 0.5 }}"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"%"}),": Calculates the remainder of an integer division. ",(0,i.jsx)(n.code,{children:"{{ 11 % 7 }}"}),"\nis ",(0,i.jsx)(n.code,{children:"4"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"//"}),": Divides two numbers and returns the floored integer result.\n",(0,i.jsx)(n.code,{children:"{{ 20 // 7 }}"})," is ",(0,i.jsx)(n.code,{children:"2"}),", ",(0,i.jsx)(n.code,{children:"{{ -20  // 7 }}"})," is ",(0,i.jsx)(n.code,{children:"-3"})," (this is just\nsyntactic sugar for the ",(0,i.jsx)(n.code,{children:"round<filters/round>"}),"\nfilter)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*"}),": Multiplies the left operand with the right one. ",(0,i.jsx)(n.code,{children:"{{ 2 * 2 }}"}),"\nwould return ",(0,i.jsx)(n.code,{children:"4"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**"}),": Raises the left operand to the power of the right operand.\n",(0,i.jsx)(n.code,{children:"{{ 2 ** 3 }}"})," would return ",(0,i.jsx)(n.code,{children:"8"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"template_logic",children:"Logic"}),"\n",(0,i.jsx)(n.p,{children:"You can combine multiple expressions with the following operators:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"and"}),": Returns true if the left and the right operands are both\ntrue."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"or"}),": Returns true if the left or the right operand is true."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"not"}),": Negates a statement."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"(expr)"}),": Groups an expression."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["We also supports bitwise operators (",(0,i.jsx)(n.code,{children:"b-and"}),", ",(0,i.jsx)(n.code,{children:"b-xor"}),", and ",(0,i.jsx)(n.code,{children:"b-or"}),")."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Operators are case sensitive."})}),"\n",(0,i.jsx)(n.h3,{id:"comparisons",children:"Comparisons"}),"\n",(0,i.jsxs)(n.p,{children:["The following comparison operators are supported in any expression:\n",(0,i.jsx)(n.code,{children:"=="}),", ",(0,i.jsx)(n.code,{children:"!="}),", ",(0,i.jsx)(n.code,{children:"<"}),", ",(0,i.jsx)(n.code,{children:">"}),", ",(0,i.jsx)(n.code,{children:">="}),", and ",(0,i.jsx)(n.code,{children:"<="}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Check if a string ",(0,i.jsx)(n.code,{children:"starts with"})," or ",(0,i.jsx)(n.code,{children:"ends with"})," another string:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% if 'Benjamin' starts with 'B' %}\n{% endif %}\n\n{% if 'Benjamin' ends with 'n' %}\n{% endif %}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Check that a string contains another string via the containment operator\n(see next section)."}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["For complex string comparisons, the ",(0,i.jsx)(n.code,{children:"matches"})," operator allows you to use\n",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Regular_expression",children:"regular expressions"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% if phone matches '/^[\\\\d\\\\.]+$/' %}\n{% endif %}\n"})})]}),"\n",(0,i.jsxs)(n.p,{children:["Check that a sequence or a mapping ",(0,i.jsx)(n.code,{children:"has every"})," or ",(0,i.jsx)(n.code,{children:"has some"})," of its\nelements return ",(0,i.jsx)(n.code,{children:"true"})," using an arrow function. The arrow function\nreceives the value of the sequence or mapping:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% assign sizes = [34, 36, 38, 40, 42] %}\n\n{% assign hasOnlyOver38 = sizes has every v => v > 38 %}\n{# hasOnlyOver38 is false #}\n\n{% assign hasOver38 = sizes has some v => v > 38 %}\n{# hasOver38 is true #}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"containment-operator",children:"Containment Operator"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"in"})," operator performs containment test. It returns ",(0,i.jsx)(n.code,{children:"true"})," if the\nleft operand is contained in the right:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{# returns true #}\n\n{{ 1 in [1, 2, 3] }}\n\n{{ 'cd' in 'abcde' }}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can use this filter to perform a containment test on strings,\nsequences, mappings, or objects implementing the ",(0,i.jsx)(n.code,{children:"Traversable"}),"\ninterface."]})}),"\n",(0,i.jsxs)(n.p,{children:["To perform a negative test, use the ",(0,i.jsx)(n.code,{children:"not in"})," operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% if 1 not in [1, 2, 3] %}\n\n{# is equivalent to #}\n{% if not (1 in [1, 2, 3]) %}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"test-operator",children:"Test Operator"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"is"})," operator performs tests. Tests can be used to test a variable\nagainst a common expression. The right operand is name of the test:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{# find out if a variable is odd #}\n\n{{ name is odd }}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Tests can accept arguments too:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% if post.status is constant('Post::PUBLISHED') %}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Tests can be negated by using the ",(0,i.jsx)(n.code,{children:"is not"})," operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% if post.status is not constant('Post::PUBLISHED') %}\n\n{# is equivalent to #}\n{% if not (post.status is constant('Post::PUBLISHED')) %}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Go to the ",(0,i.jsx)(n.code,{children:"tests<tests/index>"})," role to\nlearn more about the built-in tests."]}),"\n",(0,i.jsx)(n.h3,{id:"other-operators",children:"Other Operators"}),"\n",(0,i.jsx)(n.p,{children:"The following operators don't fit into any of the other categories:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"|"}),": Applies a filter."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".."}),": Creates a sequence based on the operand before and after the\noperator (this is syntactic sugar for the\n",(0,i.jsx)(n.code,{children:"range<functions/range>"})," role):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% for i in 1..5 %}{{ i }}{% endfor %}\n\n{# is equivalent to #}\n{% for i in range(1, 5) %}{{ i }}{% endfor %}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that you must use parentheses when combining it with the filter\noperator due to the\n",(0,i.jsx)(n.code,{children:"operator precedence rules <twig-expressions>"}),"\n:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"(1..5)|join(', ')\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"~"}),": Converts all operands into strings and concatenates them.\n",(0,i.jsx)(n.code,{children:'{{ "Hello " ~ name ~ "!" }}'})," would return (assuming ",(0,i.jsx)(n.code,{children:"name"})," is\n",(0,i.jsx)(n.code,{children:"'John'"}),") ",(0,i.jsx)(n.code,{children:"Hello John!"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"."}),", ",(0,i.jsx)(n.code,{children:"[]"}),": Gets an attribute of a variable."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"?:"}),": The ternary operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ foo ? 'yes' : 'no' }}\n{{ foo ?: 'no' }} is the same as {{ foo ? foo : 'no' }}\n{{ foo ? 'yes' }} is the same as {{ foo ? 'yes' : '' }}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"??"}),": The null-coalescing operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{# returns the value of foo if it is defined and not null, 'no' otherwise #}\n{{ foo ?? 'no' }}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"..."}),": The spread operator can be used to expand sequences or\nmappings (it cannot be used to expand the arguments of a function\ncall):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% assign numbers = [1, 2, ...moreNumbers] %}\n{% assign ratings = {'foo': 10, 'bar': 5, ...moreRatings} %}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"operators",children:"Operators"}),"\n",(0,i.jsx)(n.p,{children:"Twig uses operators to perform various operations within templates.\nUnderstanding the precedence of these operators is crucial for writing\ncorrect and efficient Twig templates."}),"\n",(0,i.jsx)(n.p,{children:"The operator precedence rules are as follows, with the lowest-precedence\noperators listed first:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operator"}),(0,i.jsx)(n.th,{children:"Score of precedence"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"?:"})}),(0,i.jsx)(n.td,{children:"0                     Ternary operator, conditional statement"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"or"})}),(0,i.jsx)(n.td,{children:"10                    Logical OR operation between two boolean expressions"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"and"})}),(0,i.jsx)(n.td,{children:"15                    Logical AND operation between two boolean expressions"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"b-or"})}),(0,i.jsx)(n.td,{children:"16                    Bitwise OR operation on integers"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"b-xor"})}),(0,i.jsx)(n.td,{children:"17                    Bitwise XOR operation on integers"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"b-and"})}),(0,i.jsx)(n.td,{children:"18                    Bitwise AND operation on integers"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"=="}),", ",(0,i.jsx)(n.code,{children:"!="}),", ",(0,i.jsx)(n.code,{children:"<=>"}),", ",(0,i.jsx)(n.code,{children:"<"}),", ",(0,i.jsx)(n.code,{children:">"}),", ",(0,i.jsx)(n.code,{children:">="}),", ",(0,i.jsx)(n.code,{children:"<="}),", ",(0,i.jsx)(n.code,{children:"not in"}),", ",(0,i.jsx)(n.code,{children:"in"}),", ",(0,i.jsx)(n.code,{children:"matches"}),", ",(0,i.jsx)(n.code,{children:"starts with"}),", ",(0,i.jsx)(n.code,{children:"ends with"}),", ",(0,i.jsx)(n.code,{children:"has some"}),", ",(0,i.jsx)(n.code,{children:"has every"})]}),(0,i.jsx)(n.td,{children:"20                    Comparison operators"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".."})}),(0,i.jsx)(n.td,{children:"25                    Range of values"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"+"}),", ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsx)(n.td,{children:"30                    Addition and subtraction on numbers"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"~"})}),(0,i.jsx)(n.td,{children:"40                    String concatenation"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"not"})}),(0,i.jsx)(n.td,{children:"50                    Negates a statement"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"*"}),", ",(0,i.jsx)(n.code,{children:"/"}),", ",(0,i.jsx)(n.code,{children:"//"}),", ",(0,i.jsx)(n.code,{children:"%"})]}),(0,i.jsx)(n.td,{children:"60                    Arithmetic operations on numbers"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"is"}),", ",(0,i.jsx)(n.code,{children:"is not"})]}),(0,i.jsx)(n.td,{children:"100                   Tests"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"**"})}),(0,i.jsx)(n.td,{children:"200                   Raises a number to the power of another"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"??"})}),(0,i.jsx)(n.td,{children:"300                   Default value when a variable is null"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"+"}),", ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsx)(n.td,{children:"500                   Unary operations on numbers"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"`"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:","}),"[]",(0,i.jsx)(n.code,{children:","}),".`"]}),(0,i.jsx)(n.td,{children:"-                    Filters, sequence, mapping, and attribute access"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Without using any parentheses, the operator precedence rules are used to\ndetermine how to convert the code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{{ 6 b-and 2 or 6 b-and 16 }}\n\n{# it is converted to the following logic: (6 & 2) || (6 & 16) #}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Change the default precedence by explicitely grouping expressions with\nparentheses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% assign greeting = 'Hello ' %}\n{% assign name = 'Benjamin' %}\n\n{{ greeting ~ name | lower }}   {# Hello benjamin #}\n\n{# use parenthesis to change precedence #}\n{{ (greeting ~ name) | lower }} {# hello benjamin #}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"templates-whitespace-control",children:"Whitespace Control"}),"\n",(0,i.jsx)(n.p,{children:"The first newline after a template tag is removed automatically. Whitespace is not further modified by the template engine, so each\nwhitespace (spaces, tabs, newlines etc.) is returned unchanged."}),"\n",(0,i.jsx)(n.p,{children:"You can also control whitespace on a per tag level. By using the\nwhitespace control modifiers on your tags, you can trim leading and or\ntrailing whitespace."}),"\n",(0,i.jsx)(n.p,{children:"We support two modifiers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Whitespace trimming"})," via the ",(0,i.jsx)(n.code,{children:"-"})," modifier: Removes all whitespace\n(including newlines);"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Line whitespace trimming"})," via the ",(0,i.jsx)(n.code,{children:"~"})," modifier: Removes all\nwhitespace (excluding newlines). Using this modifier on the right\ndisables the default removal of the first newline."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The modifiers can be used on either side of the tags like in ",(0,i.jsx)(n.code,{children:"{%-"})," or\n",(0,i.jsx)(n.code,{children:"-%}"})," and they consume all whitespace for that side of the tag. It is\npossible to use the modifiers on one side of a tag or on both sides:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% assign value = 'no spaces' %}\n{#- No leading/trailing whitespace -#}\n{%- if true -%}\n    {{- value -}}\n{%- endif -%}\n{# output 'no spaces' #}\n\n<li>\n    {{ value }}    </li>\n{# outputs '<li>\\n    no spaces    </li>' #}\n\n<li>\n    {{- value }}    </li>\n{# outputs '<li>no spaces    </li>' #}\n\n<li>\n    {{~ value }}    </li>\n{# outputs '<li>\\nno spaces    </li>' #}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["In addition to the whitespace modifiers, We also have a ",(0,i.jsx)(n.code,{children:"spaceless"}),"\nfilter that removes whitespace ",(0,i.jsx)(n.strong,{children:"between HTML tags"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",children:"{% apply spaceless %}\n    <div>\n        <strong>foo bar</strong>\n    </div>\n{% endapply %}\n\n{# output will be <div><strong>foo bar</strong></div> #}\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);